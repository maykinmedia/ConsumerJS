{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap","webpack:///external \"urijs\"","webpack:///external \"axios\"","webpack:///external \"aurelia-cookie\"","webpack:///./src/abstract-http-client.js","webpack:///./src/http-response-message.js","webpack:///./src/axios-http-client.js","webpack:///./src/abstract-list.js","webpack:///./src/list.js","webpack:///./src/utils.js","webpack:///./src/abstract-consumer.js","webpack:///./src/consumer.js","webpack:///./src/abstract-consumer-object.js","webpack:///./src/consumer-object.js","webpack:///./src/crud-consumer-object.js","webpack:///./src/crud-consumer.js","webpack:///./src/abstract-page-number-list.js","webpack:///./src/page-number-list.js","webpack:///./src/linked-page-number-list.js","webpack:///./src/index.js"],"names":["root","factory","exports","module","define","amd","a","i","global","installedModules","__webpack_require__","moduleId","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","require","AbstractHTTPClient","consumer","options","this","baseURL","endpoint","headers","defaultHeaders","arrayFormat","assign","Promise","reject","path","match","replace","HttpResponseMessage","response","responseType","statusCode","statusText","trim","AxiosHTTPClient","cancelSource","CancelToken","source","data","query","axios","configured","interceptors","use","createResponse","createError","cancelToken","token","params","transformResponse","json","paramsSerializer","serializeParams","JSON","stringify","withCredentials","csrfProtection","xsrfCookieName","csrfCookie","xsrfHeaderName","csrfHeader","entries","reduce","acc","keyStr","Array","isArray","join","requestMessage","request","status","error","parseInt","e","__CANCEL__","Boolean","axiosPromise","promise","thrown","isCancel","abort","cancel","method","uri","URI","toString","toLowerCase","getURL","getConfiguration","withAbort","AbstractList","objects","responseData","keys","__consumer__","List","diff","objOld","objNew","result","valueOld","valueNew","objDiff","length","isObject","excludeUnserializableFields","unserializableFields","indexOf","AbstractConsumer","objectClass","contentType","defaultParameters","listClass","parserDataPath","client","build","buildQuery","clientPromise","consumerPromise","setBaseURL","addHeader","header","addQuery","serialize","then","requestSuccess","requestFailed","AureliaCookie","parse","resolve","parserObject","split","forEach","part","parseList","parseScalar","array","consumerObjects","map","parseEntity","Consumer","AbstractConsumerObject","createFromObject","ConsumerObject","CrudConsumerObject","__initial_state__","getPath","newState","changedState","getChangedFields","Error","patch","put","pk","getPK","id","CrudConsumer","push","AbstractPageNumberList","currentMethod","currentPath","currentData","pageField","pageQueryParam","page","pageCountField","pageCount","pageSize","goToPage","Math","max","min","forceGet","requestPage","setSearch","PageNumberList","LinkedPageNumberList","previous","next"],"mappings":"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","file":"consumerjs.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse {\n\t\tvar a = factory();\n\t\tfor(var i in a) (typeof exports === 'object' ? exports : root)[i] = a[i];\n\t}\n})(global, function() {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 3);\n","module.exports = require(\"urijs\");","module.exports = require(\"axios\");","module.exports = require(\"aurelia-cookie\");","/** @module */\nimport {AbstractConsumer} from './abstract-consumer';\n\n/* jshint unused: false */\n\n/**\n * Abstract base class for http clients.\n * @abstract\n */\nexport class AbstractHTTPClient {\n    /**\n     * Configures HTTPClient instance.\n     * @param {AbstractConsumer} consumer Reference to consumer instantiating this object.\n     */\n    constructor(consumer, options) {\n        /** {AbstractConsumer} Reference to consumer instantiating this object. */\n        this.consumer = consumer;\n\n        /** @type {string} Base URL for all requests, gets concatenated with path passed to request methods. */\n        this.baseURL = this.consumer.endpoint;\n\n        /** @type {Object} An optional object holding key value pairs of additional headers. */\n        this.headers = this.consumer.defaultHeaders;\n\n        /** @type {string} - How to shape array query parameters: \"repeat\" or \"brackets\". */\n        this.arrayFormat = 'repeat';\n\n        if (options) {\n            Object.assign(this, options);\n        }\n    }\n\n    /**\n     * Sets the base url for all requests.\n     * @param baseURL\n     */\n    setBaseURL(baseURL) {\n        this.baseURL = baseURL;\n    }\n\n    /**\n     * Adds header to all requests.\n     * @param {string} name\n     * @param {string} value\n     */\n    addHeader(name, value) {\n        this.headers[name] = value;\n    }\n\n    /**\n     * Performs a DELETE request.\n     * @param {string} [path] Path on the endpoint.\n     * @param {Object} [data] Data payload.\n     * @returns {Promise}\n     */\n    delete(path = '', data = {}) {\n        return Promise.reject('Not implemented!');\n    }\n\n    /**\n     * Performs a GET request.\n     * @param {string} [path] Path on the endpoint.\n     * @param {Object} [data] Data payload.\n     * @returns {Promise}\n     */\n    get(path = '', data = {}) {\n        return Promise.reject('Not implemented!');\n    }\n\n    /**\n     * Performs a PATCH request.\n     * @param {string} [path] Path on the endpoint.\n     * @param {Object} [data] Data payload.\n     * @returns {Promise}\n     */\n    patch(path = '', data = {}) {\n        return Promise.reject('Not implemented!');\n    }\n\n    /**\n     * Performs a POST request.\n     * @param {string} [path] Path on the endpoint.\n     * @param {Object} [data] Data payload.\n     * @returns {Promise}\n     */\n    post(path = '', data = {}) {\n        return Promise.reject('Not implemented!');\n    }\n\n    /**\n     * Performs a PUT request.\n     * @param {string} [path] Path on the endpoint.\n     * @param {Object} [data] Data payload.\n     * @returns {Promise}\n     */\n    put(path = '', data = {}) {\n        return Promise.reject('Not implemented!');\n    }\n\n    /**\n     * Returns the full path based this.baseURL and path.\n     * @param {string} path\n     * @returns {string}\n     */\n    getURL(path) {\n        path = path + '';\n\n        if (path.match('://')) {\n            return path;\n        } else if (path) {\n            let concatenatedURL = this.baseURL + '/' + path;\n            return concatenatedURL.replace(/([^:])\\/\\/+/g, '$1/');  // Removes double slashes (//) in path.\n        }\n\n        return this.baseURL;\n    }\n}\n","/** @module */\n\n/**\n * Response object modeled after aurelia-http-client HTTPResponseMessage.\n * @class\n */\nexport class HttpResponseMessage {\n    /**\n     * Creates HttpResponseMessage.\n     * @param {Object} response\n     */\n    constructor(response) {\n        /** @type {Object} */\n        this.headers = {};\n\n        /** @type {Object} */\n        this.response = {};\n\n        /** @type {Object} */\n        this.responseType = 'text/json';\n\n        /** @type {Object} */\n        this.statusCode = 0;\n\n        /** @type {Object} */\n        this.statusText = '';\n\n        if (response) {\n            Object.assign(this, response);\n        }\n    }\n\n    /**\n     * Creates a string representation for this HttpResponseMessage.\n     * @returns {string}\n     */\n    toString() {\n        return `${this.statusCode} ${this.statusText}`.trim();\n    }\n}\n","/** @module */\nimport axios, {CancelToken} from 'axios';\nimport URI from 'urijs';\n\nimport {AbstractHTTPClient} from './abstract-http-client';\nimport {HttpResponseMessage} from './http-response-message';\n\n/**\n * HTTP client based on Axios.\n * (Response) interface is modeled after aurelia-http-client.\n * @class\n */\nexport class AxiosHTTPClient extends AbstractHTTPClient {\n    /**\n     * Configures HTTPClient instance.\n     * @param {AbstractConsumer} consumer Reference to consumer instantiating this object.\n     * @param {Object} [options] Additional configuration.\n     */\n    constructor(consumer, options) {\n        super(consumer, options);\n\n        /** @type {Object} */\n        this.cancelSource = CancelToken.source();\n\n        if (options) {\n            Object.assign(this, options);\n        }\n    }\n\n    /**\n     * Returns the configuration for axios based on this.headers and query.\n     * Makes sure the response schema closely matches former versions using aurelia-http-client.\n     * @param {Object} [data] Data payload.\n     * @param {Object} [query] Query parameters.\n     * @returns {Object}\n     */\n    getConfiguration(data, query) {\n        // Makes sure the response schema closely matches former versions using aurelia-http-client.\n        if (!axios.configured) {\n            axios.interceptors.response.use(this.createResponse.bind(this), this.createError.bind(this));\n            axios.configured = true;\n        }\n\n        // Returns the configuration for axios based on this.headers and query.\n        return {\n            cancelToken: this.cancelSource.token,\n            headers: this.headers,\n            params: query,\n            transformResponse: json => json,  // Use Consumer instance for parsing.\n            paramsSerializer: this.serializeParams.bind(this),\n            data: JSON.stringify(data),  // Bypass Axios serializer for data.\n            withCredentials: this.consumer.csrfProtection,\n            xsrfCookieName: this.consumer.csrfCookie,\n            xsrfHeaderName: this.consumer.csrfHeader\n        };\n    }\n\n    /**\n     * Serialize params to take this.arrayFormat into account.\n     * @param {Object} params\n     * @return {Object}\n     */\n    serializeParams(params) {\n        const querystring = Object.entries(params).reduce((acc, [key, value]) => {\n            let keyStr = `&${key}=`;\n\n            if (this.arrayFormat === 'brackets') {\n                keyStr = `&${key}[]=`;\n            }\n\n            if (Array.isArray(value)) {\n                value = value.join(keyStr);\n            }\n            return acc + keyStr + value;\n        }, '');\n        return querystring.replace('&', '');\n    }\n\n    /**\n     * Converts Axios response to HttpResponseMessage.\n     * @param {Object} response\n     * @returns {HttpResponseMessage}\n     */\n    createResponse(response) {\n        return new HttpResponseMessage({\n            headers: response.headers,\n            requestMessage: response.request,\n            response: response.data,\n            responseType: 'text/json',\n            statusCode: response.status,\n            statusText: response.statusText\n        });\n    }\n\n    /**\n     * Converts Axios error to HttpResponseMessage.\n     * @param error\n     * @returns {Promise<never>}\n     */\n    createError(error) {\n        let statusCode;\n\n        try {\n            if (typeof error === 'string') {\n                statusCode = parseInt(error.match(/\\d+/)[0]);\n            } else {\n                statusCode = error.response.status;\n            }\n        } catch (e) {\n            statusCode = 0;\n        }\n\n        return Promise.reject(new HttpResponseMessage({\n            statusCode: statusCode,\n            statusText: error,\n            __CANCEL__: Boolean(error.__CANCEL__),\n        }));\n    }\n\n    /**\n     * Adds/implements abort (and cancel) methods to Axios provided promise.\n     * @param {Promise} axiosPromise\n     * @returns {Promise}\n     */\n    withAbort(axiosPromise) {\n        let promise = axiosPromise\n            .catch(thrown => {\n                if (axios.isCancel(thrown)) {\n                    return Promise.reject(new HttpResponseMessage({\n                        response: thrown,\n                        responseType: 'abort',\n                        statusCode: 0,\n                        statusText: '',\n                    }));\n                } else {\n                    return Promise.reject(thrown);\n                }\n            });\n\n        promise.abort = this.cancelSource.cancel;\n        promise.cancel = this.cancelSource.cancel;\n        return promise;\n    }\n\n    /**\n     * Performs a DELETE request.\n     * @param {string} [path] Path on the endpoint.\n     * @param {Object} [data] Data payload.\n     * @returns {Promise}\n     */\n    delete(path = '', data = {}) {\n        return this.request('delete', path, data);\n    }\n\n    /**\n     * Performs a GET request.\n     * @param {string} [path] Path on the endpoint.\n     * @param {Object} [data] Data payload.\n     * @returns {Promise}\n     */\n    get(path = '', data = {}) {\n        return this.request('get', path, data);\n    }\n\n    /**\n     * Performs a PATCH request.\n     * @param {string} [path] Path on the endpoint.\n     * @param {Object} [data] Data payload.\n     * @returns {Promise}\n     */\n    patch(path = '', data = {}) {\n        return this.request('patch', path, data);\n    }\n\n    /**\n     * Performs a POST request.\n     * @param {string} [path] Path on the endpoint.\n     * @param {Object} [data] Data payload.\n     * @returns {Promise}\n     */\n    post(path = '', data = {}) {\n        return this.request('post', path, data);\n    }\n\n    /**\n     * Performs a PUT request.\n     * @param {string} [path] Path on the endpoint.\n     * @param {Object} [data] Data payload.\n     * @returns {Promise}\n     */\n    put(path = '', data = {}) {\n        return this.request('put', path, data);\n    }\n\n    /**\n     * Performs the Axios request.\n     * @param {string} method The method to use.\n     * @param {string} [path] Path on the endpoint.\n     * @param {Object} [data] Data payload.\n     * @returns {Promise}\n     */\n    request(method, path = '', data = {}) {\n        let uri = URI(path);\n        let query = uri.query(true);\n        uri.query(false);\n        path = uri.toString();\n\n        method = method.toLowerCase();\n        let promise;\n\n        if (method === 'get' || method === 'delete') {\n            promise = axios[method](this.getURL(path), this.getConfiguration(data, query));\n        } else {\n            promise = axios[method](this.getURL(path), data, this.getConfiguration(data, query));\n        }\n        return this.withAbort(promise);\n    }\n}\n","/** @module */\n\n/**\n * Abstract base class for list of consumer objects.\n * @abstract\n */\nexport class AbstractList extends Array {\n    /**\n     * Creates a new object.\n     * @param {AbstractConsumerObject[]} objects Items to populate list with.\n     * @param {Consumer} consumer Consumer instance for this object.\n     * @param {Object} responseData The response data as Object.\n     */\n    constructor(objects, consumer, responseData={}) {\n        super(...objects);\n\n        /** {Object} The response data as Object. */\n        this.responseData = responseData;\n\n        let keys = Object.keys(responseData);\n\n        for (let i in keys) {\n            if (keys.hasOwnProperty(i)) {\n                let key = keys[i];\n                this.responseData[key] = responseData[key];\n            }\n        }\n\n        /** {AbstractConsumer} Reference to consumer instantiating this object. */\n        this.__consumer__ = consumer;\n    }\n}\n","/** @module */\nimport { AbstractList } from './abstract-list';\n\n\n/**\n * List of consumer objects.\n * @class\n */\nexport class List extends AbstractList {}\n","/** @module */\n\n/**\n * Returns a new object describing the changed field in objNew.\n * Each field is compared against objOld:\n * - Only changed fields are included.\n * - Arrays are considered as a single entity (if one items differs, the entire array is considered changed).\n * - Objects are checked recusively.\n * - Primitives are checked by value.\n * @param  {Object} objOld\n * @param  {Object} objNew\n * @returns {Object}\n */\nexport function diff(objOld, objNew) {  // jshint maxdepth:3\n    let result = {};\n\n    for (let key of Object.keys(objNew)) {\n        let valueOld = (objOld) ? objOld[key] : null,\n            valueNew = objNew[key];\n\n        // Arrays are considered as a single entity (if one items differs, the array is considered changed).\n        if (Array.isArray(valueNew)) {\n            let objDiff =  diff(valueNew, valueOld);\n\n            // No items in object (inital value), discard this key.\n            if (!Object.keys(objDiff).length) {\n                continue;\n            }\n\n            result[key] = valueNew;\n        }\n\n\n        // Objects are checked recusively.\n        else if (isObject(valueNew)) {\n            let objDiff =  diff(valueOld, valueNew);\n\n            // No items in object (inital value), discard this key.\n            if (!Object.keys(objDiff).length) {\n                continue;\n            }\n\n            result[key] = objDiff;\n        }\n\n        // Primitives are checked by value.\n        else {\n            // No difference beweteen valueNew and valueOld, discard this key.\n            if (valueNew === valueOld) {\n                continue;\n            }\n\n            result[key] = valueNew;\n        }\n    }\n\n    for (let key of Object.keys(objOld)) {\n        let valueNew = objNew[key];\n\n        if (!valueNew) {\n            result[key] = null;\n        }\n    }\n\n    return result;\n}\n\n\n/**\n * Returns object without keys listed in object.unserializableFields.\n * @param {Object} object\n * @param {string[]} [unserializableFields=object.\\_\\_consumer\\_\\_.unserializableFields]\n * @returns {Object}\n */\nexport function excludeUnserializableFields(object, unserializableFields=object.__consumer__.unserializableFields) {\n    let result = {};\n\n    for (let [key, value] of Object.entries(object)) {\n        if (unserializableFields.indexOf(key) > -1) {\n            continue;\n        }\n\n        result[key] = value;\n    }\n    return result;\n}\n\n\n/**\n * Returns whether object is an object.\n * @param {*} object\n * @returns {boolean}\n */\nexport function isObject(object) {\n    return Object.prototype.toString.call(object) === '[object Object]';\n}\n","/** @module */\nimport { AureliaCookie } from 'aurelia-cookie';\nimport URI from 'urijs';\n\nimport { AxiosHTTPClient } from './axios-http-client';\nimport { List } from './list';\nimport { excludeUnserializableFields, isObject } from './utils';\n\n\n/**\n * Abstract base class for all consumers.\n * @abstract\n */\nexport class AbstractConsumer {\n    /**\n     * Configures Consumer instance.\n     * @param {string} endpoint Base endpoint for this API.\n     * @param {AbstractConsumerObject} objectClass Class to cast results to.\n     * @param {Object} [options] Additional configuration.\n     */\n    constructor(endpoint, objectClass, options=null) {\n        /** {string} The value of the Content-Type header. */\n        this.contentType = 'application/json';\n\n        /** {boolean} Wheter CSRF prtection is active. */\n        this.csrfProtection = true;\n\n        /** {string} The name for the CSRF cookie. */\n        this.csrfCookie = 'csrftoken';\n\n        /** {string} The name for the CSRF header. */\n        this.csrfHeader = 'X-CSRFToken';\n\n        /** {Object} An optional object holding key value pairs of additional headers. */\n        this.defaultHeaders = {\n            'Accept': 'application/json',\n        };\n\n        /** {Object} An optional object holding key value pairs of additional query parameters.*/\n        this.defaultParameters = {};\n\n        /** {string} The base API endpoint prefixed for all requests. */\n        this.endpoint = endpoint;\n\n        /** {Function} The class to casts objects to. */\n        this.objectClass = objectClass;\n\n        /** {Function} The class to use for lists. */\n        this.listClass = List;\n\n        /** {string} An optional dot separated path to the received objectClass' data. */\n        this.parserDataPath = '';  // TODO: Specify for both list and object.\n\n        /** {string[]} Keys on this.objectClass that should not be passed to the API. */\n        this.unserializableFields = ['__consumer__'];\n\n        /** {AbstractHTTPClient} The HttpClient instance to work with. */\n        this.client = new AxiosHTTPClient(this);\n\n        if (options) {\n            Object.assign(this, options);\n        }\n    }\n\n    /**\n     * Performs a DELETE request.\n     * @param {string} path Path on the endpoint.\n     * @param {Object} query Query parameters.\n     * @returns {Promise}\n     */\n    delete(path = '', query = {}) {\n        let uri = URI.build({'path': path, 'query': URI.buildQuery(query)});\n        return this.request('delete', uri, {});\n    }\n\n    /**\n     * Performs a GET request.\n     * @param {string} path Path on the endpoint.\n     * @param {Object} query Query parameters.\n     * @returns {Promise}\n     */\n    get(path = '', query = {}) {\n        let uri = URI.build({'path': path + '', 'query': URI.buildQuery(query)});\n        return this.request('get', uri, {});\n    }\n\n    /**\n     * Performs a PATCH request.\n     * @param {string} path Path on the endpoint.\n     * @param {Object} data Data payload.\n     * @returns {Promise}\n     */\n    patch(path = '', data = {}, query = {}) {\n        let uri = URI.build({'path': path, 'query': URI.buildQuery(query)});\n        return this.request('patch', uri, data);\n    }\n\n    /**\n     * Performs a POST request.\n     * @param {string} path Path on the endpoint.\n     * @param {Object} data Data payload.\n     * @returns {Promise}\n     */\n    post(path = '', data = {}, query = {}) {\n        let uri = URI.build({'path': path, 'query': URI.buildQuery(query)});\n        return this.request('post', uri, data);\n    }\n\n    /**\n     * Performs a PUT request.\n     * @param {string} path Path on the endpoint.\n     * @param {Object} data Data payload.\n     * @returns {Promise}\n     */\n    put(path = '', data = {}, query = {}) {\n        let uri = URI.build({'path': path, 'query': URI.buildQuery(query)});\n        return this.request('put', uri, data);\n    }\n\n    /**\n     * Performs a request.\n     * @param {string} method The method to use.\n     * @param {string} [path] Path on the endpoint, may contain query parameters for backwards compatibility.\n     * @param {Object} [data] Data payload.\n     * @returns {Promise}\n     */\n    request(method, path='', data={}) {\n        let clientPromise;\n        let consumerPromise;\n\n        // Set base url\n        this.client.setBaseURL(this.endpoint);\n\n        // Set content type\n        this.addHeader('Content-Type', this.contentType);\n\n        // Set default headers\n        for (let header of Object.keys(this.defaultHeaders)) {\n            this.addHeader(header, this.defaultHeaders[header]);\n        }\n\n        // Build query\n        let uri = URI(path);\n        uri.addQuery(this.defaultParameters);\n\n        // Serialize data\n        data = this.serialize(data);\n\n        // Return cancellable promise\n        clientPromise = this.client[method](uri.toString(), data);\n        consumerPromise = clientPromise\n                .then(response => this.requestSuccess(response, method, uri.toString(), data))\n                .catch(this.requestFailed.bind(this));\n\n        consumerPromise.abort = clientPromise.abort;\n        consumerPromise.cancel = clientPromise.cancel;\n        return consumerPromise;\n    }\n\n    /**\n     * Wrapper for Cookie.get.\n     * @param {string} name\n     * @returns {string}\n     */\n    getCookie(name) {\n        return AureliaCookie.get(name);\n    }\n\n    /**\n     * Adds a header to all future request.\n     * @param {string} name\n     * @param {string} value\n     */\n    addHeader(name, value) {\n        this.client.addHeader(name, value);\n    }\n\n    /**\n     * Serializes data.\n     * Returns data if data is not an object.\n     * Excludes fields marked in this.unserializableFields.\n     * @param {(AbstractConsumerObject|*)} data\n     * @returns {*}\n     */\n    serialize(data) {\n        // Returns data if data is not an object\n        if (!isObject(data)) {\n            return data;\n        }\n\n        // Excludes fields marked in this.unserializableFields\n        return excludeUnserializableFields(data, this.unserializableFields);\n    }\n\n    /**\n     * Callback for request.\n     * Gets called if request resolve successfully.\n     * @param {HttpResponseMessage} response\n     * @param {string} method The request method.\n     * @param {string} path The request path.\n     * @param {Object} data The request data payload.\n     * @returns {(AbstractConsumerObject|AbstractList)}\n     */\n    requestSuccess(response, method, path, data) {\n        let result = this.parse(response.response, method, path, data);\n        return Promise.resolve(result);\n    }\n\n    /**\n     * Parses JSON string to a single or list of AbstractConsumerObject instance(s).\n     * @param {string} json The response json.\n     * @param {string} method The request method.\n     * @param {string} path The request path.\n     * @param {Object} data The request data payload.\n     * @returns {(AbstractConsumerObject|AbstractList|undefined)}\n     */\n    parse(json, method, path, data) {\n        if (!json) {\n            return;\n        }\n\n        // Convert json to object.\n        let object = json;\n        if (typeof json === 'string') {\n            object = JSON.parse(json);\n        }\n\n        // Extract the relevant data.\n        let parserObject = JSON.parse(JSON.stringify(object)); // Clone.\n        if (this.parserDataPath) {\n            let parts = this.parserDataPath.split('.');\n            parts.forEach(part => {\n                parserObject = parserObject[part];\n            });\n        }\n\n        // this.parserDataPath was not found in response.\n        if (!parserObject) {\n            parserObject = object;\n        }\n\n        // Parse as list if response is a array.\n        if (Array.isArray(parserObject)) {\n            return this.parseList(parserObject, object, method, path, data);\n        }\n\n        // Parse as single item otherwise.\n        return this.parseScalar(parserObject, object, method, path, data);\n    }\n\n    /**\n     * Parses anonymous objects to a list of AbstractConsumerObjects.\n     * Gets called when result JSON.parse is an array.\n     * @param {Object[]} array\n     * @param {Object} responseData The response data as Object.\n     * @param {string} method The request method.\n     * @param {string} path The request path.\n     * @param {Object} data The request data payload.\n     * TODO: Cleanup\n     * @returns {AbstractList}\n     */\n    parseList(array, responseData, method, path, data) {\n        let consumerObjects = array.map(object => this.parseEntity(object, responseData, method, path, data));\n        return new this.listClass(consumerObjects, this, responseData, method, path, data);\n    }\n\n    /**\n     * Parses anonymous object to a single AbstractConsumerObject.\n     * Gets called when result JSON.parse is not an array.\n     * @param {Object} object\n     * @param {Object} responseData The response data as Object.\n     * @param {string} method The request method.\n     * @param {string} path The request path.\n     * @param {Object} data The request data payload.\n     * TODO: Cleanup, rename\n     * @returns {AbstractConsumerObject}\n     */\n    parseScalar(object, responseData, method, path, data) {\n        return this.parseEntity(object, responseData, method, path, data);\n    }\n\n    /**\n     * Parses anonymous object to a single AbstractConsumerObject.\n     * @param {Object} object\n     * @param {Object} responseData The response data as Object.\n     * @param {string} method The request method.\n     * @param {string} path The request path.\n     * @param {Object} data The request data payload.\n     * @returns {AbstractConsumerObject}\n     */\n    parseEntity(object, responseData, method, path, data) {  // jshint ignore:line\n        return new this.objectClass(object, this);\n    }\n\n    /**\n     * Callback for request.\n     * Gets called if request doesnt resolve successfully.\n     * @param {HttpResponseMessage} data\n     * @returns {HttpResponseMessage} data\n     */\n    requestFailed(data) {\n        return Promise.reject(data);\n    }\n}\n","/** @module */\nimport { AbstractConsumer } from './abstract-consumer';\n\n\n/**\n * Extend, instantiate and configure to request API endpoints.\n * @see {@link abstract-consumer.md} for inherited API.\n * @abstract\n */\nexport class Consumer extends AbstractConsumer {}\n","/** @module */\n\nimport { excludeUnserializableFields } from \"./utils\";\n\n/**\n * Abstract base class for object derived from Consumer\n * @abstract\n */\nexport class AbstractConsumerObject {\n    /**\n     * Creates a new object.\n     * @param {Object} data Data to parse.\n     * @param {Consumer} consumer Consumer instance for this object.\n     */\n    constructor(data, consumer) {\n        this.createFromObject(data);\n\n        /** {AbstractConsumer} Reference to consumer instantiating this object. */\n        this.__consumer__ = consumer;\n    }\n\n    /**\n     * Populates object with data consumed in data.\n     * @param {Object} data Data to parse.\n     */\n    createFromObject(data) {\n        let keys = Object.keys(data);\n\n        for (let i in keys) {\n            if (keys.hasOwnProperty(i)) {\n                let key = keys[i];\n                this[key] = data[key];\n            }\n        }\n    }\n\n    /**\n     * Serialize consumer object as JSON excluding this.unserializableFields\n     */\n    asJSON() {\n        return JSON.stringify(excludeUnserializableFields(this));\n    }\n}\n","/** @module */\nimport { AbstractConsumerObject } from './abstract-consumer-object';\n\n\n/**\n * Base class for object derived from Consumer.\n * Should be extended to provide methods for objects.\n * @see {@link abstract-consumer-object.md} for inherited API.\n * @abstract\n */\nexport class ConsumerObject extends AbstractConsumerObject {}\n","/** @module */\nimport { AbstractConsumerObject } from './abstract-consumer-object';\nimport { diff, excludeUnserializableFields } from './utils';\n\n\n/**\n * Base class for object derived from Consumer.\n * Contains various methods for common CRUD tasks.\n * Should be extended to provide methods for objects.\n * @see {@link abstract-consumer-object.md} for inherited API.\n * @abstract\n */\nexport class CrudConsumerObject extends AbstractConsumerObject {\n    /**\n     * Creates a new object.\n     * @param {Object} data Data to parse.\n     * @param {CrudConsumer} consumer Consumer instance for this object.\n     */\n    constructor(data, consumer) {\n        super(data, consumer);\n\n        /** {Object} A clone of the initial state before any modifications were made. */\n        this.__initial_state__ = JSON.parse(JSON.stringify(data));  // Create a rough clone\n    }\n\n    /**\n     * Partially Updates the object by performing a PATCH request.\n     * Only sends the changed fields as data.\n     * If no fields have changed, request is omitted and a resolving Promise is returned.\n     * After the requests resolves the initial state is updated (to allow future change detections).\n     * @returns {Promise}\n     */\n    update() {\n        let path = this.getPath(),\n            newState = excludeUnserializableFields(this),\n            changedState = this.getChangedFields();\n\n\n        if (!path) {\n            throw new Error('Can\\'t determine path, please set pk or id or define getPath()');\n        }\n\n        // If no fields have changed, request is omitted and a resolving Promise is returned\n        if (Object.keys(changedState).length === 0) {\n            return Promise.resolve(this);\n        }\n\n        // Only sends the changed fields as data\n        return this.__consumer__.patch(path, changedState)\n            .then(() => {\n                // After the requests resolves the initial state is updated (to allow future change detections)\n                this.__initial_state__= newState;\n                return Promise.resolve(this);\n            });\n    }\n\n    /**\n     * Fully Updates the object by performing a PUT request.\n     * Sends all fields as data.\n     * After the requests resolves the initial state is updated (to allow future change detections).\n     * @returns {Promise}\n     */\n    save() {\n        let path = this.getPath(),\n            newState = excludeUnserializableFields(this);\n\n        if (!path) {\n            throw new Error('Can\\'t determine path, please set pk or id or define getPath()');\n        }\n\n        // Sends all fields as data\n        return this.__consumer__.put(path, this)\n            .then(() => {\n                // After the requests resolves the initial state is updated (to allow future change detections)\n                this.__initial_state__= newState;\n                return Promise.resolve(this);\n            });\n    }\n\n    /**\n     * Removes this object.\n     * @returns {Promise}\n     */\n    delete() {\n        let path = this.getPath();\n\n        if (!path) {\n            throw new Error('Can\\'t determine path, please set pk or id or define getPath()');\n        }\n\n        return this.__consumer__.delete(path);\n    }\n\n    /**\n     * Returns the path for this object.\n     * Path is assumed to be the primary key.\n     * If no key is found, false is returned.\n     * @returns {(string|false)}\n     */\n    getPath() {\n        let pk =  this.getPK();\n\n        if (pk) {\n            return pk + '';\n        }\n        return false;\n    }\n\n    /**\n     * Tries to return the primary key of this object.\n     * First tries this.pk, this.id otherwise.\n     * If this.pk and this.id are both empty, false is returned.\n     * @returns {(*|false)} Value of pk/id or false.\n     */\n    getPK() {\n        return (this.pk || this.id || false);\n    }\n\n    /**\n     * Returns an object containing the changed properties of this object.\n     * Property names in this.\\_\\_consumer\\_\\_.unserializableFields are ignored.\n     * Properties are compared against this.\\_\\_initial_state\\_\\_.\n     * @returns {Object}\n     */\n    getChangedFields() {\n        let data = {};\n        for (let [key, value] of Object.entries(this)) {\n            // Property names in this.__consumer__.unserializableFields are ignored\n            if (this.__consumer__.unserializableFields.indexOf(key) > -1) {\n                continue;\n            }\n\n            data[key] = value;\n        }\n\n        return diff(this.__initial_state__, excludeUnserializableFields(this));\n    }\n}\n","/** @module */\nimport { AbstractConsumer } from './abstract-consumer';\nimport { CrudConsumerObject } from './crud-consumer-object';\n\n\n/**\n * Extend, instantiate and configure to request API endpoints.\n * Contains various methods for common CRUD tasks.\n * @see {@link abstract-consumer.md} for inherited API.\n * @abstract\n */\nexport class CrudConsumer extends AbstractConsumer {\n    /**\n     * Configures CrudConsumer instance.\n     * @param {string} endpoint Base endpoint for this API.\n     * @param {CrudConsumerObject} [objectClass=CrudConsumerObject] Class to cast results to.\n     * @param {Object} [options] Additional configuration.\n     */\n    constructor(endpoint, objectClass=CrudConsumerObject, options=null) {\n        super(endpoint, objectClass, options);\n\n        // Add __initial_state__ to unserializableFields\n        this.unserializableFields.push('__initial_state__');\n    }\n\n    /**\n     * Creates an object by performing a POST request.\n     * @param {Object} object Object to create.\n     * @returns {Promise}\n     */\n    create(object) {\n        return super.post('', object);\n    }\n\n    /**\n     * Retrieves an object by performing a GET request.\n     * @param {(number|string)} id\n     * @returns {Promise}\n     */\n    read(id) {\n        return super.get(id);\n    }\n}\n","/** @module */\nimport URI from 'urijs';\nimport { AbstractList } from './abstract-list';\n\n\n/**\n * Abstract base class for paginated lists.\n * @see {@link abstract-list.md} for inherited API.\n * @abstract\n */\nexport class AbstractPageNumberList extends AbstractList {\n    /**\n     * @param {AbstractConsumerObject[]} objects Items to populate list with.\n     * @param {Consumer} consumer Consumer instance for this object.\n     * @param {Object} responseData The responseData result as Object.\n     * @param {string} [method='get'] The request method.\n     * @param {string} [path=''] The request path.\n     * @param {Object} [data={}] The request data payload.\n    */\n    constructor(objects, consumer, responseData, method='get', path='', data={}) {\n        super(objects, consumer, responseData, method, path, data);\n\n        /** {string} The method of the request. */\n        this.currentMethod = method;\n\n        /** {string} The path of the request. */\n        this.currentPath = path;\n\n        /** {string} The payload of the request. */\n        this.currentData = data;\n\n        /** {string} The field to recover the page from. */\n        this.pageField = 'page';\n\n        /** {string} The parameter to indicate the request page with. */\n        this.pageQueryParam = 'page';\n\n        /** {number} The current page. */\n        this.page = parseInt(this.responseData[this.pageField]);\n\n        /** {string} The field to recover the amount of page from. */\n        this.pageCountField = 'count';\n\n        /** {number} The amount of pages. */\n        this.pageCount = parseInt(this.responseData[this.pageCountField]);\n\n        /** {number} The amount of objects on a page. */\n        this.pageSize = this.length;\n    }\n\n    /**\n     * Requests the first page.\n     * @returns {Promise}\n     */\n    first() {\n        return this.goToPage(1);\n    }\n\n    /**\n     * Requests the last page.\n     * @returns {Promise}\n     */\n    last() {\n        return this.goToPage(this.pageCount);\n    }\n\n    /**\n     * Requests the previous page.\n     * @returns {Promise}\n     */\n    previous() {\n        return this.goToPage(Math.max(this.page - 1, 1));\n    }\n\n    /**\n     * Requests the next page.\n     * @returns {Promise}\n     */\n    next() {\n        return this.goToPage(Math.min(this.page + 1, this.pageCount));\n    }\n\n    /**\n     * Navigates to page.\n     * Only replays method and payload when forceGet=false.\n     * @param {number} page\n     * @param {boolean} [forceGet=true]\n     */\n    goToPage(page, forceGet=true) {\n        let method = (forceGet) ? 'get' : this.currentMethod;\n        let data =  (forceGet) ? {} : this.currentData;\n        return this.requestPage(page, method, data);\n    }\n\n    /**\n     * Requests a page\n     * @param {number} page\n     * @param {string} method\n     * @param {Object} data\n     * @returns {Promise}\n     */\n    requestPage(page, method, data) {\n        let uri = URI(this.currentPath)\n            .setSearch(this.pageQueryParam, page);\n\n        return this.__consumer__.request(method, uri.toString(), data);\n    }\n}\n","/** @module */\nimport { AbstractPageNumberList } from './abstract-page-number-list';\n\n\n/**\n * A list with page number pagination.\n * @see {@link abstract-page-number-list.md} for inherited API.\n * @class\n */\nexport class PageNumberList extends AbstractPageNumberList {}\n","/** @module */\nimport { AbstractPageNumberList } from './abstract-page-number-list';\n\n\n/**\n * A list with linked page number pagination.\n * @see {@link abstract-page-number-list.md} for inherited API.\n * @class\n */\nexport class LinkedPageNumberList extends AbstractPageNumberList {\n    /**\n     * Requests the previous page.\n     * @returns {Promise}\n     */\n    previous() {\n        if (typeof this.responseData.previous !== 'string') {\n            return Promise.resolve(this);\n        }\n\n        let path = this.responseData.previous;\n        return this.__consumer__.get(path);\n    }\n\n    /**\n     * Requests the next page.\n     * @returns {Promise}\n     */\n    next() {\n        if (typeof this.responseData.next !== 'string') {\n            return Promise.resolve(this);\n        }\n\n        let path = this.responseData.next;\n        return this.__consumer__.get(path);\n    }\n}\n","import { Consumer } from './consumer';\nexport { ConsumerObject } from './consumer-object';\nexport { CrudConsumer } from './crud-consumer';\nexport { CrudConsumerObject } from './crud-consumer-object';\n\nexport { AbstractList } from './abstract-list';\nexport { AbstractPageNumberList } from './abstract-page-number-list';\nexport { List } from './list';\nexport { PageNumberList } from './page-number-list';\nexport { LinkedPageNumberList } from './linked-page-number-list';\n\nexport { AbstractHTTPClient } from './abstract-http-client';\nexport { AxiosHTTPClient } from './axios-http-client';\n\nimport * as utils from './utils';\n\nexport default Consumer;\nexport { Consumer };\nexport { utils };\n"],"sourceRoot":""}